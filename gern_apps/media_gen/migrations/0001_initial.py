# Generated by Django 5.1.6 on 2025-03-02 23:30

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the AI model', max_length=100, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the model')),
                ('base_model_name', models.CharField(help_text='Name of the underlying model (e.g., stabilityai/stable-diffusion-xl-base-1.0)', max_length=255)),
                ('model_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('inpaint', 'Inpaint'), ('controlnet', 'Controlnet')], help_text='Type of AI model (e.g., image, video)', max_length=50)),
                ('is_default', models.BooleanField(default=False, help_text='Is this the default model for its type?')),
            ],
            options={
                'verbose_name': 'AI Model',
                'verbose_name_plural': 'AI Models',
            },
        ),
        migrations.CreateModel(
            name='GeneralAIJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_type', models.CharField(choices=[('upscale', 'Image/Video Upscaling'), ('style_transfer', 'Style Transfer'), ('background_removal', 'Background Removal'), ('object_detection', 'Object Detection')], help_text='Type of AI job', max_length=50)),
                ('input_file', models.FileField(help_text='Input file for the AI job', upload_to='ai_jobs/')),
                ('output_file', models.FileField(blank=True, help_text='Output file of the AI job', null=True, upload_to='ai_jobs_output/')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current status of the job', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of job creation')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update')),
                ('error_message', models.TextField(blank=True, help_text='Error message if the job failed', null=True)),
                ('priority', models.IntegerField(default=1, help_text='Job priority, from higher to lower. Higher value runs sooner.')),
                ('progress', models.IntegerField(default=0, help_text='Progress of the task (0-100)')),
                ('user', models.ForeignKey(help_text='User who requested the job', on_delete=django.db.models.deletion.CASCADE, related_name='ai_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'General AI Job',
                'verbose_name_plural': 'General AI Jobs',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LoRAModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the LoRA model', max_length=100, unique=True)),
                ('file', models.FileField(help_text='LoRA model file', upload_to='lora_models/')),
                ('description', models.TextField(help_text='Description of what the LoRA model does')),
                ('base_model', models.ForeignKey(help_text='Base model this LoRA is compatible with', on_delete=django.db.models.deletion.CASCADE, to='media_gen.aimodel')),
            ],
            options={
                'verbose_name': 'LoRA Model',
                'verbose_name_plural': 'LoRA Models',
            },
        ),
        migrations.CreateModel(
            name='MediaGenerationTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prompt', models.TextField(help_text='Text prompt to guide the AI')),
                ('negative_prompt', models.TextField(blank=True, help_text='Text to guide the model on what to avoid', null=True)),
                ('width', models.PositiveIntegerField(default=512, help_text='Width of the generated image')),
                ('height', models.PositiveIntegerField(default=512, help_text='Height of the generated image')),
                ('num_inference_steps', models.PositiveIntegerField(default=50, help_text='Number of denoising steps')),
                ('guidance_scale', models.FloatField(default=7.5, help_text='Higher values make the model follow the prompt more closely')),
                ('seed', models.BigIntegerField(default=-1, help_text='Random seed (-1 for random, specific value for reproducibility)')),
                ('scheduler', models.CharField(choices=[('DDIM', 'DDIM'), ('DPM++ 2M Karras', 'DPM++ 2M Karras'), ('Euler a', 'Euler a'), ('Heun', 'Heun')], default='DPM++ 2M Karras', help_text='The diffusion scheduler used for image generation', max_length=50)),
                ('fixed_seed', models.BooleanField(default=False, help_text='Keep the seed fixed even if regenerating.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current task status', max_length=20)),
                ('output_file', models.FileField(blank=True, help_text='Path to the generated output file', null=True, upload_to='media_outputs/')),
                ('progress', models.IntegerField(default=0, help_text='Progress of the task (0-100)')),
                ('error_message', models.TextField(blank=True, help_text='Error message if the task failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of task creation')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update')),
                ('upscale', models.BooleanField(default=False, help_text='Enable upscaling after generation')),
                ('face_enhancement', models.BooleanField(default=False, help_text='Enhance faces using GFPGAN')),
                ('priority', models.IntegerField(default=1, help_text='Job priority, from higher to lower. Higher value runs sooner.')),
                ('task_type', models.CharField(choices=[('text_to_image', 'Text to Image'), ('text_to_video', 'Text to Video'), ('image_to_video', 'Image to Video'), ('image_inpainting', 'Image Inpainting'), ('image_outpainting', 'Image Outpainting'), ('controlnet', 'Controlnet Image Generation')], help_text='Type of media generation task', max_length=50)),
                ('duration', models.FloatField(default=5.0, help_text='Duration of the generated video in seconds')),
                ('resolution', models.CharField(blank=True, choices=[('480p', '480p'), ('720p', '720p'), ('1080p', '1080p')], default='720p', help_text='Resolution of the video', max_length=20, null=True)),
                ('frame_rate', models.PositiveIntegerField(blank=True, default=24, help_text='Frames per second of the video', null=True)),
                ('image_input', models.FileField(blank=True, help_text='Input image for transformation', null=True, upload_to='image_inputs/')),
                ('mask_image', models.FileField(blank=True, help_text='Mask image for inpainting/outpainting', null=True, upload_to='mask_images/')),
                ('control_image', models.FileField(blank=True, help_text='ControlNet input image', null=True, upload_to='control_images/')),
                ('controlnet_type', models.CharField(blank=True, help_text='Type of ControlNet processing', max_length=50, null=True)),
                ('batch_size', models.PositiveIntegerField(default=1, help_text='Number of images to generate in a batch')),
                ('lora_model', models.ForeignKey(blank=True, help_text='LoRA model to use', null=True, on_delete=django.db.models.deletion.SET_NULL, to='media_gen.loramodel')),
                ('model', models.ForeignKey(help_text='AI model used for this task', null=True, on_delete=django.db.models.deletion.SET_NULL, to='media_gen.aimodel')),
                ('user', models.ForeignKey(help_text='User who requested the task', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Media Generation Task',
                'verbose_name_plural': 'Media Generation Tasks',
            },
        ),
    ]
